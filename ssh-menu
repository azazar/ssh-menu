#!/usr/bin/perl -w

use strict;

use Curses::UI;

### SSH Host List Handling

# Hash to store unique SSH URIs
my %ssh_uris;

# Array to store sorted SSH URIs for the menu
my @ssh_uris;

# Counter to keep track of the number of SSH URIs
my $ssh_uri_count;

# Adds an SSH URI to the list if it's not a wildcard and not already present
sub add_ssh_uri {
    my ($host) = @_;

    # Skip wildcard entries
    return if $host =~ /\*/;

    # Increment the count and add to hash if not already present
    if (!exists $ssh_uris{$host}) {
        $ssh_uris{$host} = ++$ssh_uri_count;
        unshift(@ssh_uris, $host);
    }
}

my $bash_history_last_line;

our %mosh;

sub load_ssh_uris() {
    %ssh_uris = ();
    @ssh_uris = ();
    $ssh_uri_count = 0;

    # Use three-argument open with a lexical filehandle for better error handling
    if (open(my $ssh_config_fh, '<', $ENV{'HOME'} . '/.ssh/config')) {
       while(<$ssh_config_fh>) {
           next unless (/^host (.+)/i);
           my $h = $1;
           add_ssh_uri $ENV{'USER'}."\@$h";
           add_ssh_uri "root\@$h";
       }
       close $ssh_config_fh;
    }

    # Use three-argument open with a lexical filehandle for better error handling
    if (open(my $mc_hotlist_fh, '<', $ENV{'HOME'} . '/.config/mc/hotlist')) {
        while(<$mc_hotlist_fh>) {
            add_ssh_uri $1 if (/^ENTRY "[^"]+" URL "\/sh:\/\/([^\/]+)[^"]*"/i); #"
        }
        close $mc_hotlist_fh;
    }

    # Use three-argument open with a lexical filehandle for better error handling
    if (open(my $bash_history_fh, '<', $ENV{'HOME'} . '/.bash_history')) {
        while(<$bash_history_fh>) {
            s/^exec +//;

            $bash_history_last_line = $_;

            if (my ($cmd, $uri) = /^(ssh|ssh-copy-id|mosh) .*?([A-Za-z0-9\.-_]+\@[A-Za-z0-9_\.:-]+)/i) {
                add_ssh_uri $uri;
                $mosh{$uri} = $cmd eq 'mosh';
            }
        }
        close $bash_history_fh;
    }

    @ssh_uris = sort{$ssh_uris{$b}<=>$ssh_uris{$a}}(keys(%ssh_uris));
}

load_ssh_uris();

if ($ARGV[0] && $ARGV[0] eq '--dump') {
    print join("\n", @ssh_uris)."\n";
    exit;
}

### UI

my $cui = new Curses::UI( -color_support => 1 );

our $selected;

my $ssh_menu_box;

sub selected() {
    $selected = $ssh_menu_box->get;
    $cui->mainloopExit;
}

sub exit_dialog() {
    $cui->mainloopExit
}

our $force_mosh = 0;

sub enable_mosh() {
    $force_mosh = 1;
}

sub disable_mosh() {
    $force_mosh = -1;
}

my $win1 = $cui->add(
    'win1', 'Window',
    -title => 'SSH Connections',
    -border => 1,
    #-y      => 1,
    -bbg    => 'white',
    -tbg    => 'white',

    -bfg    => 'green',
    -tfg    => 'green',

    -bg     => 'white',
    -fg     => 'black',
);

my @ssh_menu = ();

my %ssh_menu_labels = ();

my $max_username_len = 0;

foreach my $ssh_uri (@ssh_uris) {
    if ($ssh_uri =~ /^([^@]+)\@/) {
        my $username_len = length($1);

        $max_username_len = $username_len if $max_username_len < $username_len;
    }
}

foreach my $ssh_uri (@ssh_uris) {
    push(@ssh_menu, $ssh_uri);

    my $label = $ssh_uri;

    if ($ssh_uri =~ /^([^@]+)\@(.+)$/) {
        my $username = $1;
        my $host = $2;
        my $username_len = length($username);

        $label = ' ' x ($max_username_len - $username_len) . $username . ' @ ' . $host;
    }

    $ssh_menu_labels{$ssh_uri} = $label;
}

$ssh_menu_box = $win1->add(
    'ssh_menu',
    'Listbox',
    -values => \@ssh_menu,
    -labels => \%ssh_menu_labels,
    -ipad => 1,
    -onchange => \&selected,
    -vscrollbar => 1,

    -fg => 'black',
    -bg => 'white',
);

$cui->set_binding( \&exit_dialog, "\cQ" );
$cui->set_binding( \&exit_dialog, "Q" );
$cui->set_binding( \&exit_dialog, "q" );
$cui->set_binding( \&exit_dialog, "\r" );
$cui->set_binding( \&enable_mosh, "M" );
$cui->set_binding( \&disable_mosh, "S" );

$ssh_menu_box->focus();
$cui->layout();
$cui->mainloop();

$cui->leave_curses();

if ($selected) {
    my $cmd;
    if (($force_mosh == 0 && $mosh{$selected}) || $force_mosh == 1) {
        $cmd = "mosh ";
    }
    else {
        $cmd = "ssh ";
    }
    $cmd .= "$selected";

# Append the command to .bash_history if it's not the same as the last line
if (-e $ENV{'HOME'} . '/.bash_history' && "$cmd\n" ne $bash_history_last_line) {
    # Use three-argument open with a lexical filehandle for better error handling
    if (open(my $bash_history_fh, '>>', $ENV{'HOME'} . '/.bash_history')) {
        print $bash_history_fh "exec $cmd\n";
        close $bash_history_fh;
    }
}

    exec($cmd);
}
